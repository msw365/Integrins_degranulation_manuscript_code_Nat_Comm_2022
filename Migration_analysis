import sys
from ij import IJ
from ij import WindowManager
from fiji.plugin.trackmate import Model
from fiji.plugin.trackmate import Settings
from fiji.plugin.trackmate import TrackMate
from fiji.plugin.trackmate import SelectionModel
from fiji.plugin.trackmate import Logger
from fiji.plugin.trackmate.detection import LogDetectorFactory
from fiji.plugin.trackmate.tracking import LAPUtils
from fiji.plugin.trackmate.tracking.sparselap import SparseLAPTrackerFactory from fiji.plugin.trackmate.gui.displaysettings import DisplaySettingsIO
import fiji.plugin.trackmate.visualization.hyperstack.HyperStackDisplayer as HyperStackDisplayer
import fiji.plugin.trackmate.features.FeatureFilter as FeatureFilter
# We have to do the following to avoid errors with UTF8 chars generated in # TrackMate that will mess with our Fiji Jython.
reload(sys)
sys.setdefaultencoding('utf-8')
# Get currently selected image
# imp = WindowManager.getCurrentImage()
imp = IJ.openImage('https://fiji.sc/samples/FakeTracks.tif') imp.show()
#----------------------------
# Create the model object now #----------------------------
# Some of the parameters we configure below need to have # a reference to the model at creation. So we create an
# empty model now.
model = Model()
# Send all messages to ImageJ log window. model.setLogger(Logger.IJ_LOGGER)
#------------------------
# Prepare settings object #------------------------
 settings = Settings(imp)
# Configure detector - We use the Strings for the keys settings.detectorFactory = LogDetectorFactory() settings.detectorSettings = {
'DO_SUBPIXEL_LOCALIZATION' : True, 'RADIUS' : 2.5,
'TARGET_CHANNEL' : 1, 'THRESHOLD' : 0., 'DO_MEDIAN_FILTERING' : False,
}
# Configure spot filters - Classical filter on quality filter1 = FeatureFilter('QUALITY', 30, True) settings.addSpotFilter(filter1)
# Configure tracker - We want to allow merges and fusions
settings.trackerFactory = SparseLAPTrackerFactory()
settings.trackerSettings = LAPUtils.getDefaultLAPSettingsMap() # almost good enough settings.trackerSettings['ALLOW_TRACK_SPLITTING'] = True settings.trackerSettings['ALLOW_TRACK_MERGING'] = True
# Add ALL the feature analyzers known to TrackMate. They will
# yield numerical features for the results, such as speed, mean intensity etc. settings.addAllAnalyzers()
# Configure track filters - We want to get rid of the two immobile spots at
# the bottom right of the image. Track displacement must be above 10 pixels.
filter2 = FeatureFilter('TRACK_DISPLACEMENT', 10, True) settings.addTrackFilter(filter2)
#-------------------
# Instantiate plugin #-------------------
trackmate = TrackMate(model, settings)
#--------
# Process #--------
ok = trackmate.checkInput() if not ok:
sys.exit(str(trackmate.getErrorMessage()))

 ok = trackmate.process() if not ok:
sys.exit(str(trackmate.getErrorMessage()))
#----------------
# Display results #----------------
# A selection.
selectionModel = SelectionModel( model )
# Read the default display settings.
ds = DisplaySettingsIO.readUserDefault()
displayer = HyperStackDisplayer( model, selectionModel, imp, ds ) displayer.render()
displayer.refresh()
# Echo results with the logger we set at start: model.getLogger().log( str( model ) )
import sys
from ij import IJ
from ij import WindowManager
from fiji.plugin.trackmate import TrackMate from fiji.plugin.trackmate import Model
from fiji.plugin.trackmate import SelectionModel from fiji.plugin.trackmate import Settings
from fiji.plugin.trackmate import Logger
from fiji.plugin.trackmate.detection import DogDetectorFactory
from fiji.plugin.trackmate.tracking import LAPUtils
from fiji.plugin.trackmate.tracking.sparselap import SparseLAPTrackerFactory from fiji.plugin.trackmate.gui.displaysettings import DisplaySettingsIO
from fiji.plugin.trackmate.visualization.hyperstack import HyperStackDisplayer
# We have to do the following to avoid errors with UTF8 chars generated in # TrackMate that will mess with our Fiji Jython.
reload(sys)
sys.setdefaultencoding('utf-8')
# Get currently selected image

 # imp = WindowManager.getCurrentImage()
imp = IJ.openImage('https://fiji.sc/samples/FakeTracks.tif') imp.show()
#-------------------------
# Instantiate model object #-------------------------
model = Model()
# Set logger model.setLogger(Logger.IJ_LOGGER)
#------------------------
# Prepare settings object #------------------------
settings = Settings(imp)
# Configure detector
settings.detectorFactory = DogDetectorFactory() settings.detectorSettings = {
'DO_SUBPIXEL_LOCALIZATION' : True, 'RADIUS' : 2.5,
'TARGET_CHANNEL' : 1, 'THRESHOLD' : 5., 'DO_MEDIAN_FILTERING' : False,
}
# Configure tracker
settings.trackerFactory = SparseLAPTrackerFactory() settings.trackerSettings = LAPUtils.getDefaultLAPSettingsMap() settings.trackerSettings['LINKING_MAX_DISTANCE'] = 10.0 settings.trackerSettings['GAP_CLOSING_MAX_DISTANCE'] = 10.0 settings.trackerSettings['MAX_FRAME_GAP'] = 3
# Add the analyzers for some spot features. # Here we decide brutally to add all of them. settings.addAllAnalyzers()
# We configure the initial filtering to discard spots # with a quality lower than 1. settings.initialSpotFilterValue = 1.
print(str(settings))

 #----------------------
# Instantiate trackmate #----------------------
trackmate = TrackMate(model, settings)
#------------
# Execute all #------------
ok = trackmate.checkInput() if not ok:
sys.exit(str(trackmate.getErrorMessage()))
ok = trackmate.process() if not ok:
sys.exit(str(trackmate.getErrorMessage()))
#----------------
# Display results #----------------
model.getLogger().log('Found ' + str(model.getTrackModel().nTracks(True)) + ' tracks.')
# A selection.
sm = SelectionModel( model )
# Read the default display settings.
ds = DisplaySettingsIO.readUserDefault()
# The viewer.
displayer = HyperStackDisplayer( model, sm, imp, ds ) displayer.render()
# The feature model, that stores edge and track features. fm = model.getFeatureModel()
# Iterate over all the tracks that are visible.
for id in model.getTrackModel().trackIDs(True):
# Fetch the track feature from the feature model.
v = fm.getTrackFeature(id, 'TRACK_MEAN_SPEED') model.getLogger().log('')
model.getLogger().log('Track ' + str(id) + ': mean velocity = ' + str(v) + ' ' +

 model.getSpaceUnits() + '/' + model.getTimeUnits())
# Get all the spots of the current track. track = model.getTrackModel().trackSpots(id) for spot in track:
sid = spot.ID()
# Fetch spot features directly from spot.
# Note that for spots the feature values are not stored in the FeatureModel
# object, but in the Spot object directly. This is an exception; for tracks
# and edges, you have to query the feature model. x=spot.getFeature('POSITION_X')
y=spot.getFeature('POSITION_Y')
t=spot.getFeature('FRAME')
q=spot.getFeature('QUALITY')
snr=spot.getFeature('SNR_CH1') mean=spot.getFeature('MEAN_INTENSITY_CH1')
model.getLogger().log('\tspot ID = ' + str(sid) + ': x='+str(x)+', y='+str(y)+', t='+str(t)
+', q='+str(q) + ', snr='+str(snr) + ', mean = ' + str(mean))
import os
import numpy as np import scipy
from scipy import stats
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt plt.ion()
import csv
#data location
path = '/Users/benjaminyanawiner/Desktop'
#csv name
fnameWT1 = 'NT_TH_2_Spots in tracks statistics.csv'
os.chdir(path)
#fn to convert csv into nested array of [[partticle_num, t, x, y]] def array_gen(fname):
i= 0
array_rep = []
with open(fname.split('.')[0] + '.csv', newline='') as csvfile:
spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|') for row in spamreader:

i+= 1
if i ==1:
title_row = row else:
particle = row[0].split(',')[2]
x = row[0].split(',')[4]
y = float(row[0].split(',')[5]) #corrects for diff indexing in images and trackmate t = row[0].split(',')[8]
array_rep.append([int(particle),int(t),float(x),float(y)])
#input()
array_rep = np.asarray(array_rep) particlenums = np.unique(array_rep[:,0]) array_rep_total = []
for particle in particlenums:
array_rep_total.append(array_rep[array_rep[:,0] == particle]) return array_rep_total
#convert the css
WTdata = array_gen(fnameWT1)
#calculate displacement of each track
WT_disp = [np.sqrt((entry[-1,3]-entry[0,3])**2 + (entry[-1,2]-entry[0,2])**2) for entry in WTdata]
#calculation mean instantaneous velocity
WT_vel = [np.mean(np.sqrt((entry[1:,3]-entry[0:-1,3])**2 + (entry[1:,2]-entry[0:-1,2])**2)) for entry in WTdata]
#calculate distance of each track
WT_dist = [np.sum(np.sqrt((entry[1:,3]-entry[0:-1,3])**2 + (entry[1:,2]-entry[0:-1,2])**2)) for entry in WTdata]
